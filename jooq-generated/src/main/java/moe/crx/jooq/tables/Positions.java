/*
 * This file is generated by jOOQ.
 */
package moe.crx.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import moe.crx.jooq.Keys;
import moe.crx.jooq.Public;
import moe.crx.jooq.tables.records.PositionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Positions extends TableImpl<PositionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.positions</code>
     */
    public static final Positions POSITIONS = new Positions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionsRecord> getRecordType() {
        return PositionsRecord.class;
    }

    /**
     * The column <code>public.positions.id</code>.
     */
    public final TableField<PositionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.positions.receipt_id</code>.
     */
    public final TableField<PositionsRecord, Integer> RECEIPT_ID = createField(DSL.name("receipt_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.positions.product_id</code>.
     */
    public final TableField<PositionsRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.positions.price</code>.
     */
    public final TableField<PositionsRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.positions.amount</code>.
     */
    public final TableField<PositionsRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    private Positions(Name alias, Table<PositionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Positions(Name alias, Table<PositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.positions</code> table reference
     */
    public Positions(String alias) {
        this(DSL.name(alias), POSITIONS);
    }

    /**
     * Create an aliased <code>public.positions</code> table reference
     */
    public Positions(Name alias) {
        this(alias, POSITIONS);
    }

    /**
     * Create a <code>public.positions</code> table reference
     */
    public Positions() {
        this(DSL.name("positions"), null);
    }

    public <O extends Record> Positions(Table<O> child, ForeignKey<O, PositionsRecord> key) {
        super(child, key, POSITIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PositionsRecord> getPrimaryKey() {
        return Keys.POSITIONS_ID;
    }

    @Override
    public List<ForeignKey<PositionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POSITIONS__RECEIPT_ID, Keys.POSITIONS__PRODUCT_ID);
    }

    private transient Receipts _receipts;
    private transient Products _products;

    /**
     * Get the implicit join path to the <code>public.receipts</code> table.
     */
    public Receipts receipts() {
        if (_receipts == null)
            _receipts = new Receipts(this, Keys.POSITIONS__RECEIPT_ID);

        return _receipts;
    }

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.POSITIONS__PRODUCT_ID);

        return _products;
    }

    @Override
    public Positions as(String alias) {
        return new Positions(DSL.name(alias), this);
    }

    @Override
    public Positions as(Name alias) {
        return new Positions(alias, this);
    }

    @Override
    public Positions as(Table<?> alias) {
        return new Positions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(String name) {
        return new Positions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(Name name) {
        return new Positions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(Table<?> name) {
        return new Positions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Double, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super Double, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super Double, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
