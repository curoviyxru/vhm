/*
 * This file is generated by jOOQ.
 */
package moe.crx.jooq.tables.records;


import moe.crx.jooq.tables.Organizations;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationsRecord extends UpdatableRecordImpl<OrganizationsRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.organizations.inn</code>.
     */
    public OrganizationsRecord setInn(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.organizations.inn</code>.
     */
    public Integer getInn() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.organizations.name</code>.
     */
    public OrganizationsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.organizations.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.organizations.giro</code>.
     */
    public OrganizationsRecord setGiro(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.organizations.giro</code>.
     */
    public String getGiro() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Organizations.ORGANIZATIONS.INN;
    }

    @Override
    public Field<String> field2() {
        return Organizations.ORGANIZATIONS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Organizations.ORGANIZATIONS.GIRO;
    }

    @Override
    public Integer component1() {
        return getInn();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getGiro();
    }

    @Override
    public Integer value1() {
        return getInn();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getGiro();
    }

    @Override
    public OrganizationsRecord value1(Integer value) {
        setInn(value);
        return this;
    }

    @Override
    public OrganizationsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public OrganizationsRecord value3(String value) {
        setGiro(value);
        return this;
    }

    @Override
    public OrganizationsRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrganizationsRecord
     */
    public OrganizationsRecord() {
        super(Organizations.ORGANIZATIONS);
    }

    /**
     * Create a detached, initialised OrganizationsRecord
     */
    public OrganizationsRecord(Integer inn, String name, String giro) {
        super(Organizations.ORGANIZATIONS);

        setInn(inn);
        setName(name);
        setGiro(giro);
    }

    /**
     * Create a detached, initialised OrganizationsRecord
     */
    public OrganizationsRecord(moe.crx.jooq.tables.pojos.Organizations value) {
        super(Organizations.ORGANIZATIONS);

        if (value != null) {
            setInn(value.getInn());
            setName(value.getName());
            setGiro(value.getGiro());
        }
    }
}
