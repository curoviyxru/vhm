/*
 * This file is generated by jOOQ.
 */
package moe.crx.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import moe.crx.jooq.Keys;
import moe.crx.jooq.Public;
import moe.crx.jooq.tables.records.ReceiptsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Receipts extends TableImpl<ReceiptsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.receipts</code>
     */
    public static final Receipts RECEIPTS = new Receipts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReceiptsRecord> getRecordType() {
        return ReceiptsRecord.class;
    }

    /**
     * The column <code>public.receipts.id</code>.
     */
    public final TableField<ReceiptsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.receipts.date</code>.
     */
    public final TableField<ReceiptsRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.receipts.organization_id</code>.
     */
    public final TableField<ReceiptsRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Receipts(Name alias, Table<ReceiptsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Receipts(Name alias, Table<ReceiptsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.receipts</code> table reference
     */
    public Receipts(String alias) {
        this(DSL.name(alias), RECEIPTS);
    }

    /**
     * Create an aliased <code>public.receipts</code> table reference
     */
    public Receipts(Name alias) {
        this(alias, RECEIPTS);
    }

    /**
     * Create a <code>public.receipts</code> table reference
     */
    public Receipts() {
        this(DSL.name("receipts"), null);
    }

    public <O extends Record> Receipts(Table<O> child, ForeignKey<O, ReceiptsRecord> key) {
        super(child, key, RECEIPTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReceiptsRecord> getPrimaryKey() {
        return Keys.RECEIPTS_PK;
    }

    @Override
    public List<ForeignKey<ReceiptsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RECEIPTS__ORGANIZATION_ID);
    }

    private transient Organizations _organizations;

    /**
     * Get the implicit join path to the <code>public.organizations</code>
     * table.
     */
    public Organizations organizations() {
        if (_organizations == null)
            _organizations = new Organizations(this, Keys.RECEIPTS__ORGANIZATION_ID);

        return _organizations;
    }

    @Override
    public Receipts as(String alias) {
        return new Receipts(DSL.name(alias), this);
    }

    @Override
    public Receipts as(Name alias) {
        return new Receipts(alias, this);
    }

    @Override
    public Receipts as(Table<?> alias) {
        return new Receipts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Receipts rename(String name) {
        return new Receipts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Receipts rename(Name name) {
        return new Receipts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Receipts rename(Table<?> name) {
        return new Receipts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
